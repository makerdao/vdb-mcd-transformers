on:
  push:
    branches:
      - develop

name: Deploy to AWS QA

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: qa
      AWS_REGION: eu-central-1
      DOCKER_ORG: makerdao
      MCD_EXECUTE_NAME: vdb-mcd-execute
      BACKFILL_STORAGE_NAME: vdb-backfill-storage
      BACKFILL_EVENTS_NAME: vdb-backfill-events
      EXTRACT_DIFFS_NAME: vdb-extract-diffs
      CLUSTER_NAME: vdb-cluster-qa
      QA_NETWORK_CONFIG: awsvpcConfiguration={subnets=[${{ secrets.QA_TASK_SUBNETS }}],securityGroups=[${{ secrets.QA_TASK_SGS }}],assignPublicIp=${{ secrets.QA_TASK_PUBLIC_IP }}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract commit hash
      id: vars
      shell: bash
      run: |
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Build, tag, and push images to Docker Registry
      id: build-image
      env:
        SHA_TAG: ${{ steps.vars.outputs.sha_short }}
        LATEST_TAG: latest
        BRANCH_TAG: develop
      run: |
        # Build a docker container and
        # push it to Docker repo so that it can
        # be deployed to ECS.
        docker build -f dockerfiles/extract_diffs/Dockerfile \
                     -t $DOCKER_ORG/$EXTRACT_DIFFS_NAME:$SHA_TAG \
                     -t $DOCKER_ORG/$EXTRACT_DIFFS_NAME:$LATEST_TAG \
                     -t $DOCKER_ORG/$EXTRACT_DIFFS_NAME:$BRANCH_TAG \
                     .
        docker build -f dockerfiles/backfill_storage/Dockerfile \
                     -t $DOCKER_ORG/$BACKFILL_STORAGE_NAME:$SHA_TAG \
                     -t $DOCKER_ORG/$BACKFILL_STORAGE_NAME:$LATEST_TAG \
                     -t $DOCKER_ORG/$BACKFILL_STORAGE_NAME:$BRANCH_TAG \
                     .
        docker build -f dockerfiles/backfill_events/Dockerfile \
                     -t $DOCKER_ORG/$BACKFILL_EVENTS_NAME:$SHA_TAG \
                     -t $DOCKER_ORG/$BACKFILL_EVENTS_NAME:$LATEST_TAG \
                     -t $DOCKER_ORG/$BACKFILL_EVENTS_NAME:$BRANCH_TAG \
                     .
        docker build -f dockerfiles/execute/Dockerfile \
                     -t $DOCKER_ORG/$MCD_EXECUTE_NAME:$SHA_TAG \
                     -t $DOCKER_ORG/$MCD_EXECUTE_NAME:$LATEST_TAG \
                     -t $DOCKER_ORG/$MCD_EXECUTE_NAME:$BRANCH_TAG \
                     .
        docker push $DOCKER_ORG/$EXTRACT_DIFFS_NAME --all-tags
        docker push $DOCKER_ORG/$BACKFILL_STORAGE_NAME --all-tags
        docker push $DOCKER_ORG/$BACKFILL_EVENTS_NAME --all-tags
        docker push $DOCKER_ORG/$MCD_EXECUTE_NAME --all-tags

    - name: Run ECS Tasks with latest Docker image
      id: run-tasks
      run: |
        aws ecs run-task \
          --cluster $CLUSTER_NAME \
          --launch-type FARGATE \
          --task-definition $BACKFILL_EVENTS_NAME-$ENVIRONMENT \
          --network-configuration $QA_NETWORK_CONFIG \
          --region $AWS_REGION

        aws ecs run-task \
          --cluster $CLUSTER_NAME \
          --launch-type FARGATE \
          --task-definition $BACKFILL_STORAGE_NAME-$ENVIRONMENT \
          --network-configuration $QA_NETWORK_CONFIG \
          --region $AWS_REGION

    - name: Update ECS service with latest Docker image
      id: service-update
      run: |
        aws ecs update-service --cluster $CLUSTER_NAME --service $MCD_EXECUTE_NAME-$ENVIRONMENT --force-new-deployment --region $AWS_REGION
        aws ecs update-service --cluster $CLUSTER_NAME --service $EXTRACT_DIFFS_NAME-eu-$ENVIRONMENT --force-new-deployment --region $AWS_REGION
        aws ecs update-service --cluster $CLUSTER_NAME --service $EXTRACT_DIFFS_NAME-us-$ENVIRONMENT --force-new-deployment --region $AWS_REGION
        aws ecs wait services-stable --cluster $CLUSTER_NAME --services $MCD_EXECUTE_NAME-$ENVIRONMENT $EXTRACT_DIFFS_NAME-eu-$ENVIRONMENT $EXTRACT_DIFFS_NAME-us-$ENVIRONMENT && echo $? || echo $?
        aws ecs wait services-stable --cluster $CLUSTER_NAME --services $MCD_EXECUTE_NAME-$ENVIRONMENT $EXTRACT_DIFFS_NAME-eu-$ENVIRONMENT $EXTRACT_DIFFS_NAME-us-$ENVIRONMENT && echo $? || echo $?

    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: qa
        version_prefix: vdb-mcd-transformers
