#!/usr/bin/env python
import subprocess, sys, argparse, time

parser = argparse.ArgumentParser(description="Check the startup of the execute container")
parser.add_argument("image", help="name of the image you're running")
parser.add_argument("--client_ipcpath", help="IPC Path of the geth container", required=True)
parser.add_argument("--database_hostname", help="hostname of the postgres database", default="postgres")
parser.add_argument("--database_name", help="name of the postgres database schema", default="postgres")
parser.add_argument("--database_port", help="port of the postgres database", default="5432")
parser.add_argument("--database_user", help="username of the postgres database user", default="postgres")
parser.add_argument("--database_password", help="password of the postgres database user", default="postgres")
parser.add_argument("--wait_time", help="seconds to wait for the container to be ready", default="60", type=int)
args = parser.parse_args()

cp = subprocess.run(['docker', 'ps', '--latest', '--format', '"{{.ID}}"'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
container_id = cp.stdout.decode('utf-8').strip().replace('"', '')

popen = subprocess.Popen(['docker', 'run', '-i',
                          '--network', f'container:{container_id}',
                          '--name', 'test_execute',
                          '-e', f'DATABASE_NAME={args.database_name}',
                          '-e', f'DATABASE_HOSTNAME={args.database_hostname}',
                          '-e', f'DATABASE_PORT={args.database_port}',
                          '-e', f'DATABASE_USER={args.database_user}',
                          '-e', f'DATABASE_PASSWORD={args.database_password}',
                          '-e', f'CLIENT_IPCPATH={args.client_ipcpath}', args.image],
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)

try:
  stdout, stderr = popen.communicate(timeout=5)
  print(f'docker run failed to start image\nout: {stdout}\nerr: {stderr}')
  sys.exit(popen.returncode)
except subprocess.TimeoutExpired:
  print(f'starting execute image with pid {popen.pid}')

time_waiting = 0
while time_waiting <= args.wait_time:
  time.sleep(5)
  cp = subprocess.run(['docker', 'ps',
                       '--filter', f'name=test_execute',
                       '--format', '"{{.Status}}"'],
                      stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  status = cp.stdout.decode('utf-8').strip().replace('"', '')
  if '(healthy)' in status:
    print('execute container is healthy')
    popen.kill()
    sys.exit(0)
  else:
    print(f'after {time_waiting} seconds container is not healthy, wait 5 more: {status}')
    time_waiting = time_waiting + 5

print('execute container never became healthy')
sys.exit(1)
